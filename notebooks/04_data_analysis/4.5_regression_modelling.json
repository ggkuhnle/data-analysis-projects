{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "frontmatter",
   "metadata": {},
   "source": [
    "---\n",
    "title: \"Regression Modelling\"\n",
    "output-file: \"regression_modelling.html\"\n",
    "format: html\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "intro",
   "metadata": {},
   "source": [
    "# ðŸ“ˆ 4.5 Regression Modelling\n",
    "\n",
    "This notebook introduces linear regression for nutrition research, focusing on modelling relationships between variables.\n",
    "\n",
    "**Objectives**:\n",
    "- Build and interpret linear regression models.\n",
    "- Evaluate model performance using RÂ² and residuals.\n",
    "- Apply regression to `vitamin_trial.csv` to model vitamin D levels.\n",
    "\n",
    "**Context**: Regression models help nutritionists understand how factors like time or treatment affect nutrient levels, such as vitamin D in hippo trials.\n",
    "\n",
    "<details><summary>Fun Fact</summary>\n",
    "Hippos may not run regressions, but their vitamin D data loves a good linear fit! ðŸ¦›\n",
    "</details>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "setup",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Regression environment ready.\n"
     ]
    }
   ],
   "source": [
    "# Install required packages\n",
    "%pip install pandas numpy scikit-learn matplotlib  # Ensures compatibility in Colab\n",
    "import pandas as pd  # For data manipulation\n",
    "import numpy as np  # For numerical operations\n",
    "from sklearn.linear_model import LinearRegression  # For linear regression\n",
    "from sklearn.preprocessing import LabelEncoder  # For encoding categorical variables\n",
    "import matplotlib.pyplot as plt  # For visualization\n",
    "print('Regression environment ready.')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "load_data",
   "metadata": {},
   "source": [
    "## Data Preparation\n",
    "\n",
    "Load `vitamin_trial.csv` and preprocess for regression analysis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "load",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data shape: (200, 5)\n",
      "Sample row: ID=V1, Group=Control, Vitamin_D=12.5, Time=6, Outcome=Normal\n"
     ]
    }
   ],
   "source": [
    "# Load the dataset\n",
    "df = pd.read_csv('data/vitamin_trial.csv')  # Path relative to notebook\n",
    "\n",
    "print(f'Data shape: {df.shape}')  # Display rows and columns\n",
    "print(f'Sample row: ID={df.iloc[0][\"ID\"]}, Group={df.iloc[0][\"Group\"]}, Vitamin_D={df.iloc[0][\"Vitamin_D\"]}, Time={df.iloc[0][\"Time\"]}, Outcome={df.iloc[0][\"Outcome\"]}')  # Show first row"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "regression",
   "metadata": {},
   "source": [
    "## Linear Regression\n",
    "\n",
    "Model `Vitamin_D` as a function of `Time` and `Group`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "regression",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Linear Regression Results:\n",
      "- Intercept: 12.0\n",
      "- Time: 0.050\n",
      "- Group (Treatment): 0.200\n",
      "- RÂ² Score: 0.750\n"
     ]
    }
   ],
   "source": [
    "# Encode categorical variable\n",
    "le_group = LabelEncoder()\n",
    "df['Group_Encoded'] = le_group.fit_transform(df['Group'])  # Control=0, Treatment=1\n",
    "\n",
    "# Prepare features and target\n",
    "X = df[['Time', 'Group_Encoded']]  # Features\n",
    "y = df['Vitamin_D']  # Target\n",
    "\n",
    "# Fit linear regression model\n",
    "model = LinearRegression()\n",
    "model.fit(X, y)\n",
    "\n",
    "# Print results\n",
    "print('Linear Regression Results:')\n",
    "print(f'- Intercept: {model.intercept_:.1f}')\n",
    "print(f'- Time: {model.coef_[0]:.3f}')\n",
    "print(f'- Group (Treatment): {model.coef_[1]:.3f}')\n",
    "print(f'- RÂ² Score: {model.score(X, y):.3f}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "residuals",
   "metadata": {},
   "source": [
    "## Residual Analysis\n",
    "\n",
    "Visualize residuals to evaluate model fit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "residuals",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Calculate residuals\n",
    "y_pred = model.predict(X)\n",
    "residuals = y - y_pred\n",
    "\n",
    "# Plot residuals\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.scatter(y_pred, residuals, alpha=0.5)\n",
    "plt.axhline(0, color='red', linestyle='--')\n",
    "plt.title('Residual Plot')\n",
    "plt.xlabel('Predicted Vitamin D')\n",
    "plt.ylabel('Residuals')\n",
    "plt.show()  # Display scatter plot"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "exercise",
   "metadata": {},
   "source": [
    "## Exercise: Extend the Model\n",
    "\n",
    "Add an interaction term between `Time` and `Group_Encoded` to the regression model and report the new RÂ² score.\n",
    "\n",
    "**Guidance**:\n",
    "- Create an interaction term (e.g., `df['Time_Group'] = df['Time'] * df['Group_Encoded']`).\n",
    "- Include `Time_Group` in `X` and refit the model.\n",
    "- Report the new RÂ² score."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "your_answer",
   "metadata": {},
   "source": [
    "**Answer**:\n",
    "\n",
    "My extended model code and results are as follows:\n",
    "\n",
    "```python\n",
    "# Your code here\n",
    "```\n",
    "\n",
    "**Results**:\n",
    "\n",
    "- RÂ² Score: [Your Result]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "wrap",
   "metadata": {},
   "source": [
    "## Conclusion\n",
    "\n",
    "Youâ€™ve applied linear regression to model vitamin D levels, interpreting coefficients and evaluating fit with residuals.\n",
    "\n",
    "**Next Steps**: Explore logistic regression and survival analysis in `4.6_logistic_survival.ipynb`.\n",
    "\n",
    "**Resources**:\n",
    "- [Scikit-Learn Documentation](https://scikit-learn.org/)\n",
    "- [Regression Tutorial](https://www.datacamp.com/community/tutorials/linear-regression-python)\n",
    "- Repository: [github.com/ggkuhnle/data-analysis-projects](https://github.com/ggkuhnle/data-analysis-projects)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}